package com.cc.struct;

/**
 * User: chenchong
 * Date: 2018/12/19
 * description:	红黑树
 *
 * 		红黑规则：
 * 			1. 每一个节点要么是红色，要么是黑色
 * 			2. 根节点必须是黑色的
 * 			3. 如果节点是红色的，则他的子节点必须是黑色的
 * 			4. 从根到叶节点的每条路径，必须包含相同数目的黑色节点
 *
 * 		X：插入节点		P：X的父节点		G：P的父节点
 * 	 	X 是 G 的外侧子孙节点 ： X、P、G 在一条斜线上		(需要旋转 1 次)
 *		X 是 G 的内侧子孙节点 ： X、P、G 不在一条斜线上		(需要旋转 2 次)
 *
 * 		特点：
 * 			1. 	新插入的节点 (X) 总是红色
 * 			2.  平衡树
 * 			3.  自顶向下插入
 *
 * 		优点：
 * 			1. 对有序数据很有效
 * 			2. 查询效率和二叉查找树一样
 * 			3. 插入和删除效率比二叉查找树低一些
 *
 * 		缺点：
 * 			1. 平均每插入一次数据就需要旋转一次
 *
 */
public class MyTreeRedBlank<T> {



}
